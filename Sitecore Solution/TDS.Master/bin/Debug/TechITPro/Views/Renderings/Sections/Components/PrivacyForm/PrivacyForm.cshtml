
@inherits Glass.Mapper.Sc.Web.Mvc.GlassView<TechITPro.Samples.Models.PrivacyForm>

@using (Html.BeginRouteForm(Sitecore.Mvc.Configuration.MvcSettings.SitecoreRouteName, FormMethod.Post, new { @class = "PrivacyElection-form", @id = "privacyElection" }))
{
    <h1 class="page-header">Privacy Form</h1>
    if (@Model.SaveSuccessful && @Model.FormSubmitted)
    {
        <div class="alert alert-success alert-dismissible fade in" role="alert">
            <div class="container">
                <div class="row">
                    <div class="alert-content col-xs-12">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @Html.Raw(@Model.SuccessAlert)
                    </div>
                </div>
            </div>
        </div>
    }
    if (!@Model.SaveSuccessful && @Model.FormSubmitted)
    {
        <div class="alert alert-danger alert-dismissible fade in" role="alert">
            <div class="container">
                <div class="row">
                    <div class="alert-content col-xs-12">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @Html.Raw(@Model.ErrorAlert)
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="col-md-12">

        <div class="row">
            <div class="form-group col-sm-12">
                <label class="sr-only" for="FirstName">@Model.FirstName</label>
                @if (string.IsNullOrEmpty(Model.FirstName))
                {
                    @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control Login-form-input", @type = "text", @id = "FirstName", @placeholder = @Model.FirstNamePlaceholder, @Value = "", @maxlength = "20" })
                }
                else
                {
                    @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control Login-form-input", @type = "text", @id = "FirstName", @Value = @Model.FirstName, @maxlength = "20" })
                }
                <div class="alert alert-danger text-left">
                    @Html.ValidationMessageFor(x => x.FirstName)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-sm-12">
                <label class="sr-only" for="LastName">@Model.LastName</label>
                @if (string.IsNullOrEmpty(Model.LastName))
                {
                    @Html.TextBoxFor(x => x.LastName, new { @class = "form-control Login-form-input", @type = "text", @id = "LastName", @placeholder = @Model.LastNamePlaceholder, @Value = "", @maxlength = "20" })
                }
                else
                {
                    @Html.TextBoxFor(x => x.LastName, new { @class = "form-control Login-form-input", @type = "text", @id = "LastName", @Value = @Model.LastName, @maxlength = "20" })
                }
                <div class="alert alert-danger text-left">
                    @Html.ValidationMessageFor(x => x.LastName)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-sm-12">
                <label class="sr-only" for="Address">@Model.Address</label>
                @if (string.IsNullOrEmpty(Model.Address))
                {
                    @Html.TextBoxFor(x => x.Address, new { @class = "form-control Login-form-input", @type = "text", @id = "Address", @placeholder = @Model.AddressPlaceholder, @Value = "", @maxlength = "40" })
                }
                else
                {
                    @Html.TextBoxFor(x => x.Address, new { @class = "form-control Login-form-input", @type = "text", @id = "Address", @Value = @Model.Address, @maxlength = "40" })
                }
                <div class="alert alert-danger text-left">
                    @Html.ValidationMessageFor(x => x.Address)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-sm-12">
                <label class="sr-only" for="City">@Model.City</label>
                @if (string.IsNullOrEmpty(Model.City))
                {
                    @Html.TextBoxFor(x => x.City, new { @class = "form-control Login-form-input", @type = "text", @id = "City", @placeholder = @Model.CityPlaceholder, @Value = "", @maxlength = "25" })
                }
                else
                {
                    @Html.TextBoxFor(x => x.City, new { @class = "form-control Login-form-input", @type = "text", @id = "City", @Value = @Model.City, @maxlength = "25" })
                }
                <div class="alert alert-danger text-left">
                    @Html.ValidationMessageFor(x => x.City)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group col-sm-12 col-md-7">
                <label class="sr-only" for="State">@Model.State</label>
                @if (string.IsNullOrEmpty(Model.State))
                {
                    @Html.TextBoxFor(x => x.State, new { @class = "form-control Login-form-input", @type = "text", @id = "State", @placeholder = @Model.StatePlaceholder, @Value = "", @maxlength = "25" })
                }
                else
                {
                    @Html.TextBoxFor(x => x.State, new { @class = "form-control Login-form-input", @type = "text", @id = "State", @Value = @Model.State, @maxlength = "25" })
                }
                <div class="alert alert-danger text-left">
                    @Html.ValidationMessageFor(x => x.State)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="form-group col-sm-12 col-md-7">
                <label class="sr-only" for="ZipCode">@Model.ZipCode</label>
                @if (string.IsNullOrEmpty(Model.ZipCode))
                {
                    @Html.TextBoxFor(x => x.ZipCode, new { @class = "form-control Login-form-input", @type = "text", @id = "ZipCode", @placeholder = @Model.ZipCodePlaceholder, @Value = "", @maxlength = "5" })
                }
                else
                {
                    @Html.TextBoxFor(x => x.ZipCode, new { @class = "form-control Login-form-input", @type = "text", @id = "ZipCode", @Value = @Model.ZipCode, @maxlength = "5" })
                }
                <div class="alert alert-danger text-left">
                    @Html.ValidationMessageFor(x => x.ZipCode)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group col-sm-12 col-md-7">
                <label class="sr-only" for="Phone">@Model.Phone</label>
                @if (string.IsNullOrEmpty(Model.Phone))
                {
                    @Html.TextBoxFor(x => x.Phone, new { @class = "form-control Login-form-input", @type = "text", @id = "Phone", @placeholder = @Model.PhonePlaceholder, @Value = "", @maxlength = "10" })
                }
                else
                {
                    @Html.TextBoxFor(x => x.Phone, new { @class = "form-control Login-form-input", @type = "text", @id = "Phone", @Value = @Model.Phone, @maxlength = "10" })
                }
                <div class="alert alert-danger text-left">
                    @Html.ValidationMessageFor(x => x.Phone)
                </div>
            </div>
        </div>

        <div class="form-group submit-container">
            <input type="submit" name="submitButton"
                   value=@Model.SubmitButtonText
                   aria-label="Submit form" role="button" id="submitButton" class="btn btn-primary">

        </div>
        @Html.TextBoxFor(x => x.SuccessAlert, new { @type = "hidden", @id = "SuccessAlert", @Value = @Model.SuccessAlert })
        @Html.TextBoxFor(x => x.ErrorAlert, new { @type = "hidden", @id = "ErrorAlert", @Value = @Model.ErrorAlert })
    </div>
}  